Progress Report
Current Status: 
The prototype for our web app is up and running at spy-words.herokuapp.com. From the home screen you can create a game for either two or four players, or you can join an existing game if you have it’s unique game name. You can also view the rules and privacy policy. Once in the game, you are shown a waiting message until all the players have entered the game, at which point the game starts. Spymasters send clues to their partner field agent, who guess words by clicking on the cards. The javascript regulates game rules, preventing any actions when not your turn, and limiting clues to single words that don’t include any word already on the board (using regexs). Messages in a chat window can be sent to the other players, and past clues are recorded to look back upon when strategizing. Finally, the players are alerted who won when the game ends.

Design Details: 
The main goals were to keep things simple, intuitive, and aesthetically pleasing. For the game page one major task was making it easy for the spymaster to see which cards go with which team, while also making it clear which cards have been already guessed. We found box shadows and light background-coloring for unguessed words were best at drawing attention, while dark shading without box shadows was good for already-guessed clues that don’t have to be thought about as much anymore. The layout of card-grid on the left and controls on the right is one that we settled on pretty early in the design phase, and has been liked by our users. Messages and past clues are meant to be easily accessed, but out of the way when taking your turn. 

Implementation Details: 
The server is done with Node.js using express and socket.io to communicate with the clients. We tried using MongoDB to store game data at first, but this was prone to occasional lags, so we switched to internally storing the data. We host the app with heroku, which provides free users with 512MB of RAM (although doesn’t cut you off until 1GB), which allows us to handle on the order of 100,000 simultaneous games being played. For the early stages this hasn’t even remotely approached being a problem, and if user demand reaches close to 100,000 simultaneous games we could start thinking about monetizing with ads to support the costs of a higher-spec hosting platform. Additionally, we could re-integrate the mongo database to store even more games. 
There was one other problem we found with heroku’s free hosting: it only allows for 18 hours of server up-time in any 24 hour period before forcing the server to sleep. The server automatically enters an idle state that doesn’t use up any of that time, but since our pages use sockets to provide real-time features, the sockets were continually pinging the server, preventing it from idling. Thus, we ran into a problem where we would go through 18 hours of usage straight (likely because someone left a page open), forcing the app to be down for the next 6 hours. This isn’t a desirable behavior, so we added a page timeout feature that disconnects the socket after ten minutes of user inactivity.
Another way we prevent user error is, when trying to refresh or go back, we prompt the user to confirm that that is what they want to do. Finally, we provide our real-time behavior through socket interaction between client scripts and the server. With this, we let users get immediate updates about what roles are available when joining a game, and provide real time game play (giving clues, guessing words, and sending chats).

Remaining Work: 
A large chunk of the remaining work will be in improving design and user experience (such as adding an exit/home button to the game page). Additionally, it would be neat to get a computer-spymaster feature working, using the conceptnet5 API to find word associations for cards on the board. Early testing of this API has shown that it may not be very good, but it would be fun nonetheless to see how good it could get :)

Thanks, and let us know if you have any comments or suggestions for the app!
